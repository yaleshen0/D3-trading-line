<!DOCTYPE html>
<style type="text/css">
 /* body, html {
        width: 100%;
        height: 100%;
        margin: 0;
      }*/
  .area.above {
    fill: #936c29;
  }
  .area.below {
    fill: #2a592d;
  }
  div.tooltip {
    position: absolute;
    text-align: center;
    width: 60px;
    height: 28px;
    padding: 2px;
    font: 12px sans-serif;
    border: 0px;
    pointer-events: none;
  }
  .legend {
    font: 16px sans-serif;
    font-weight: bold;         
    text-anchor: start;
  }
</style>
<svg width="960" height="500"></svg>
<script src="https://d3js.org/d3.v4.min.js"></script>
<script>

var svg = d3.select("svg"),
    margin = {top: 20, right: 20, bottom: 30, left: 50},
    width = +svg.attr("width") - margin.left - margin.right,
    height = +svg.attr("height") - margin.top - margin.bottom,
    g = svg.append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")")
            .call(d3.zoom().on("zoom", function () {
                svg.attr("transform", d3.event.transform)
            }))
            .append("g");
var div = d3.select("body").append("div")
    .attr("class", "tooltip")
    .style("opacity", 0);
// time foramt
var parseTime = d3.timeFormat("%H:%M:%S.%LZ");
// time str to date in bboList
function timeStrToDate(timeStr) {
    var time = timeStr.split(':');
    var d = new Date();
    d.setHours  (+time[0]);
    d.setMinutes( time[1]);
    d.setSeconds( time[2]);
    return d;
  }
// nanoseconds to time tradeList
function nanoToTime(duration) {
    var milliseconds = parseInt((duration/1000)/100000000)
        , seconds = parseInt((duration/1000000000)%60)
        , minutes = parseInt((duration/(1000000000*60))%60)
        , hours = parseInt((duration/(1000000000*60*60))%24);

    hours = (hours < 10) ? "0" + hours : hours;
    minutes = (minutes < 10) ? "0" + minutes : minutes;
    seconds = (seconds < 10) ? "0" + seconds : seconds;

    return hours + ":" + minutes + ":" + seconds + "." + milliseconds;
}
var x = d3.scaleTime()
    .rangeRound([0, width]);

var y0 = d3.scaleLinear()
    .rangeRound([height, 0]);
var y1 = d3.scaleLinear()
    .rangeRound([height, 0]);

var y = d3.scaleLinear().range([height, 0]);

// define area
var area = d3.area()
    .x(function(d) { return x(d.timeStr); })
    .y0(function(d) { return y0(+d.ask); })
    // .y1(function(d) { return y1(+d.bid); })
    .curve(d3.curveStepAfter);

var area1 = d3.area()
    .x(function(d) { return x(d.timeStr); })
    // .y0(function(d) { return y0(+d.ask); })
    .y1(function(d) { return y1(+d.bid); })
    .curve(d3.curveStepAfter);
// get json data
d3.json("stock.json", function(error, data) {
  if (error) throw error;
// retrieve data from json format
  bboList = data.bboList;
  tradeList = data.tradeList;
  tradeType = tradeList.map(function(d) { return d.tradeType; });

//formatting bboList and tradeList
  bboList.forEach(function(d) {
    d.timeStr = timeStrToDate(d.timeStr);
    d.ask = +(d.ask / 10000);
    d.bid = +(d.bid / 10000);
    return d;
  });
  tradeList.forEach(function(d) {
    d.time = timeStrToDate(nanoToTime(d.time));
    d.price = +(d.price / 10000)
    return d;
  });

  x.domain(d3.extent(bboList, function(d) { return d.timeStr; }))
  
  // domain from min to max number of bid and ask
  var min = d3.min(bboList, function(d) { return Math.min(d.ask, d.bid); });
  var max = d3.max(bboList, function(d) { return Math.max(d.ask, d.bid); });

  y.domain([min, max]);

  y0.domain([min, max]);
  y1.domain([min, max]);

// Draw area above and below
  g.append("path")
      .datum(bboList)
      .attr("class", "area above")
      .attr("d", area.y1(0));
  g.append("path")
      .datum(bboList)
      .attr("class", "area below")
      .attr("d", area1.y0(height));
// Draw trade data
  g.selectAll("circle")
      .data(tradeList)
    .enter().append("circle")
      .attr("class", "dot")
      .attr("r", 1.5)
      .attr("cx", function(d) { return x(d.time); })
      .attr("cy", function(d) { return y(d.price); })
      .style("fill", function(d) {        
          if (d.tradeType == 'E') {return "black"} // Top Left
          else {return "pink"} // Top Right      
      })
      .on("mouseover", function(d) {
         div.transition()
           .duration(200)
           .style("opacity", 1);
         div.html(d.orderReferenceNumber + "<br/>" + d.price + "<br/>" + d.shares + "<br/>" + parseTime(d.time) + "<br/>" + d.tradeType)
           .style("left", (d3.event.pageX) + "px")
           .style("top", (d3.event.pageY - 28) + "px");
       })
      .on("mouseout", function(d) {
         div.transition()
           .duration(500)
           .style("opacity", 0);
       });

  // Add the X Axis
  g.append("g")
      .attr("transform", "translate(0," + height + ")")
      .call(d3.axisBottom(x));

  g.append("g")
      .call(d3.axisLeft(y))
    .append("text")
      .attr("fill", "#000")
      .attr("transform", "rotate(-90)")
      .attr("y", 10)
      .attr("dy", "0.71em")
      .attr("text-anchor", "end")
      .text("Price ($)");

  // add the trade list toggle display
  g.append("text")
     .data(tradeList)
     .attr("x", width - 480)             
     .attr("y", 0)    
     .attr("class", "legend")
     .style("fill", "steelblue")         
     .on("click", function(d){
        // Determine if current line is visible
        var active   = d.active ? false : true,
        newOpacity = active ? "hidden" : "show";
        // Hide or show the elements
        d3.selectAll(".dot").attr("visibility", newOpacity);
        // Update whether or not the elements are active
        d.active = active;
      })
     .text("Trade List");
  // g.append("text")
  //    .data(tradeType)
  //    .attr("x", 0)             
  //    .attr("y", 0)    
  //    .attr("class", "legend")
  //    .style("fill", "steelblue")         
  //    .on("click", function(d){
  //     console.log(d)
  //       // Determine if current line is visible
  //       var active = (d == 'E').active ? false : true,
  //       newOpacity = active ? "hidden" : "show";
  //       console.log(active)
  //       // Hide or show the elements
  //       d3.selectAll(".dot").attr("visibility", newOpacity);
  //       // Update whether or not the elements are active
  //       d.active = active;
  //     })
  //    .text("Trade Type: E");

});

</script>